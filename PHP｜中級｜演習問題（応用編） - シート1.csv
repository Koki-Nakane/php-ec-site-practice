フェーズ1: 基本となるクラス群の設計と実装 (問題 1 - 10)
ECサイトの基盤作成

1. Product クラスの拡張:
"id, name, price, description (商品説明)、stock (在庫数) のプロパティを持つ Product クラスを作成してください。price と stock は、コンストラクタやセッターで 0 未満の値が設定されないようバリデーションを行ってください。"

2. User クラスの機能追加:
"id, name, email, password (ハッシュ化して保存)、address (住所) のプロパティを持つ User クラスを作成してください。パスワードをハッシュ化して設定するメソッドと、入力されたパスワードがハッシュと一致するか検証するメソッド (verifyPassword) を実装してください。"

3. Cart クラスの作成:
"商品をカートに追加、削除、一覧表示する機能を持つ Cart クラスを作成してください。内部では、Product オブジェクトの配列と、その個数を保持するようにしてください。（例: private $items = ['product' => Product, 'quantity' => 2]; のような形式）"

4. Cart クラスと Product クラスの連携:
"Cart クラスの addItem(Product $product, int $quantity) メソッドを実装してください。追加しようとした Product の stock を確認し、在庫が不足している場合は Exception をスローするようにしてください。"

5. Database 接続クラス (Singleton):
"PDO を使用してデータベースに接続する Database クラスを、シングルトンパターンで実装してください。アプリケーション全体で単一のデータベース接続を共有できるようにします。
参考：https://laranote.jp/learning-singleton-in-php/"

6. ProductMapper クラスの作成 (データマッパーパターン):
Database クラスを利用して、products テーブルから Product オブジェクトを取得 (find(int $id))、保存 (save(Product $product))、削除 (delete(Product $product)) する責務を持つ ProductMapper クラスを作成してください。

7. UserMapper クラスの作成:
ProductMapper と同様に、users テーブルと User オブジェクトをマッピングする UserMapper クラスを作成してください。findByEmail(string $email) のような、メールアドレスでユーザーを検索するメソッドも実装しましょう。

8. Logger トレイトの作成:
ファイルにログメッセージを書き出す log(string $message) メソッドを持つ Logger トレイトを作成してください。ログには、現在の日時も記録するように DateTime クラスを使用してください。

9: UserMapper へのロギング機能の追加:
問題8で作成した Logger トレイトを UserMapper クラスで使用してください。ユーザーの保存 (save) や削除 (delete) が行われた際に、ログファイルにその操作が記録されるようにしてください。

10. Order クラスの作成:
注文情報を保持する Order クラスを作成してください。User オブジェクト、Cart の内容（商品と数量）、合計金額、注文日時をプロパティとして持つようにします。

フェーズ2: クラス間の連携とWeb機能の実装 (問題 11 - 25)
セッションと認証

11. ログイン処理の実装:
"AuthController というクラスを作成し、login(string $email, string $password) メソッドを実装してください。UserMapper を使ってユーザーを検索し、パスワードが一致すれば、セッションにユーザーIDを保存してください。"

12. ログアウト処理:
AuthController に logout() メソッドを実装し、セッションを破棄してログアウトできるようにしてください。

13. 認証チェック:
ユーザーがログインしているかどうかをチェックする isAuthenticated() メソッドを AuthController に実装してください。このメソッドは、後々のページでアクセス制御に利用します。

カート機能のWebへの統合

14. セッションを使ったカートの実装:
Cart オブジェクトをセッションに保存し、ユーザーがページを移動してもカートの内容が保持されるようにしてください。

15. 商品一覧ページ (index.php):
ProductMapper を使って全商品を取得し、一覧表示してください。各商品の隣に「カートに入れる」ボタンを設置してください。

16. カート追加処理 (add_to_cart.php):
商品一覧ページからのリクエストを受け取り、指定された商品と数量をセッションの Cart に追加してください。Product の在庫チェックも忘れずに行ってください。

17. カート表示ページ (cart.php):
セッションに保存されている Cart の内容を一覧表示し、合計金額も計算して表示してください。

注文プロセスの実装

18. 注文処理 (checkout.php):
ログインしているユーザーのみがアクセスできるように、AuthController の isAuthenticated() でチェックしてください。ログインしていない場合は、ログインページにリダイレクトしてください。

19. 注文確定処理 (place_order.php):
checkout.php からのPOSTリクエストを受け取ります。Order オブジェクトを生成し、Cart の内容と現在の User 情報を設定してください。

20. OrderMapper の作成:
orders テーブルと order_items テーブルに注文情報を保存する OrderMapper を作成してください。save(Order $order) メソッドは、トランザクションを利用して、両方のテーブルへの書き込みが成功した場合のみコミットするようにしてください。

21. 在庫の更新:
注文が確定したら (OrderMapper->save() が成功したら)、購入された商品の在庫 (stock) を products テーブルから減らす処理を実装してください。これもトランザクションに含めるべきです。

JSON APIの作成

22. 商品API (api/products.php):
GETリクエストに対し、全商品の情報をJSON形式で返すAPIを作成してください。ヘッダーを Content-Type: application/json に設定するのを忘れないでください。

23. 特定の商品API (api/product.php):
id パラメータを受け取り、指定されたIDの Product 情報のみをJSONで返すAPIを作成してください。該当商品がなければ404エラーを返してください。

24. cURLを使ったAPIの利用:
外部のPHPスクリプトから、問題22で作成したAPIにcURLでアクセスし、取得したJSONデータをデコードして表示してください。

25. カスタム例外 ApiException の作成:
API関連でエラーが発生した際にスローする ApiException を作成してください。この例外は、HTTPステータスコードも保持できるように設計してください。

フェーズ3: 応用的な機能と高度なテクニック (問題 26 - 40)
ブログシステムの構築

26. Post クラスと Category クラスの作成:
"ブログ記事を表す Post クラス (id, title, content, createdAt) と、カテゴリを表す Category クラス (id, name) を作成してください。"

27. 多対多リレーションの実装:
1つの記事が複数のカテゴリに属せるよう、中間テーブル (post_categories) を設計してください。その上で、特定のカテゴリに属する記事一覧を取得する findPostsByCategory(int $categoryId) のようなメソッドを PostMapper に実装してください。

28. MarkdownからHTMLへの変換:
ブログ記事の content がMarkdown形式で書かれていると仮定し、表示する際にHTMLに変換する機能を実装してください。（ライブラリ Parsedown などを利用することを想定）

29.コメント機能 (Comment クラス):
"記事へのコメントを表す Comment クラス (id, postId, authorName, content, createdAt) と、それをDB操作する CommentMapper クラスを作成してください。"

30. ファイルアップロード機能:
ブログ記事に画像を添付できるように、ファイルアップロードを処理する ImageUploader クラスを作成してください。ファイル名が重複しないようリネームし、指定されたディレクトリに保存する機能を持ちます。

予約システムの設計

31. Reservation クラスと TimeSlot クラス:
施設の予約情報を管理する Reservation クラスと、予約可能な時間帯を表す TimeSlot クラスを作成してください。TimeSlot には予約状況（空き、予約済み）のステータスを持たせてください。

32. 予約ロジックの実装:
指定された日時の TimeSlot が予約可能かを確認し、空いていれば Reservation を作成して保存する makeReservation メソッドを持つ ReservationController クラスを作成してください。

33. ジェネレータを使った日付範囲の生成:
yield を使って、指定した期間（例: 1週間）の日付を順に返すジェネレータ関数を作成してください。予約カレンダーの表示などに利用します。

高度なテクニック

34. PSR-4オートローダの実装:
spl_autoload_register を使い、名前空間に基づいたディレクトリ構造からクラスファイルを自動で読み込む、PSR-4準拠のオートローダを自作してください。(Project\Models\User -> src/Models/User.php)

35. DIコンテナ (依存性注入):
UserMapper のようなクラスのインスタンス生成と依存関係の管理を行う、簡単なDI (Dependency Injection) コンテナクラスを作成してください。コントローラ等は、このコンテナから必要なオブジェクトを取得するようにリファクタリングします。

36. イベントディスパッチャの実装:
user.created のようなイベントを発行し、それを受け取って複数の処理（例: ウェルカムメールの送信、ログ記録）を実行する、簡単なイベントディスパッチャを実装してください。

37. ミドルウェアパターンの実装:
リクエストがコントローラに到達する前に、認証チェックやロギングを行うミドルウェアを実装する仕組みを考えてみましょう。

38. 抽象ファクトリパターン:
FileLogger と DatabaseLogger を切り替えられるように、Logger のインスタンスを生成する LoggerFactory 抽象ファクトリを作成してください。設定によってどちらのロガーを使うか選択できるようにします。

39. 正規表現による入力フィルタ:
ユーザー登録時に入力されるユーザー名が、半角英数字とアンダースコアのみで構成されているかを preg_match で検証してください。

40. CSVエクスポート機能:
指定した月の注文一覧 (Order オブジェクトの配列) を fputcsv を使ってCSVファイルとして出力し、ユーザーにダウンロードさせる機能を実装してください。

フェーズ4: 総合演習 (問題 41 - 50)
既存機能を組み合わせた総合課題

41. 管理画面の実装:
"これまで作成した UserMapper, ProductMapper, OrderMapper を利用して、管理者向けのダッシュボードを作成してください。ユーザー、商品、注文の一覧表示と、簡単な編集・削除機能が必要です。（管理者のみがアクセスできるよう、認証チェックを実装してください）"

42. RESTful APIの設計:
"ブログシステム（Post, Comment）を操作するためのRESTful APIを設計・実装してください。GET, POST, PUT, DELETE メソッドを適切に使い分け、リソースを操作できるようにします。"

43. パスワードリセット機能:
ユーザーがパスワードを忘れた場合のために、パスワードリセット機能を実装してください。トークンを生成してDBに保存し、メールでリセット用URLを送信する流れを実装します。

44. ECサイトのレビュー機能:
購入した商品に対して、ユーザーがレビュー（評価とコメント）を投稿できる機能を実装してください。Product クラスと User クラス、そして新しく作る Review クラスを連携させます。

45. クーポンの適用ロジック:
Cart の合計金額から割引を行う Coupon クラスを作成してください。割引には固定額割引と、率割引の2種類があるとします。Cart クラスに applyCoupon(Coupon $coupon) のようなメソッドを追加します。

46. バッチ処理の実装:
コマンドラインから実行するPHPスクリプトを作成してください。1ヶ月以上ログインのない非アクティブなユーザーを検索し、そのリストをメールで管理者に通知する、というバッチ処理を実装します。

47. ユニットテストの作成 (PHPUnit):
Cart クラスの addItem メソッドや getTotalPrice メソッドに対して、PHPUnitを使ったユニットテストを作成してください。正常系と、在庫不足などの異常系の両方のテストケースを書いてみましょう。

48. 外部APIとの連携:
郵便番号を入力すると住所を自動入力する機能を実装してください。外部の郵便番号検索APIにcURLでリクエストを送り、取得したJSONデータを使ってフォームに入力します。

49. 検索機能の実装:
ブログ記事のタイトルと内容から、キーワード検索を行う機能を実装してください。LIKE句を使った簡単なもので構いませんが、SQLインジェクション対策は必ず行ってください。